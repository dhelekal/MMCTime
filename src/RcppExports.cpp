// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// maj_edge
Rcpp::IntegerMatrix maj_edge(Rcpp::List trees);
RcppExport SEXP _MMCTime_maj_edge(SEXP treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    rcpp_result_gen = Rcpp::wrap(maj_edge(trees));
    return rcpp_result_gen;
END_RCPP
}
// nodes_in_clades
Rcpp::IntegerVector nodes_in_clades(Rcpp::List trees, Rcpp::IntegerMatrix clades);
RcppExport SEXP _MMCTime_nodes_in_clades(SEXP treesSEXP, SEXP cladesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type clades(cladesSEXP);
    rcpp_result_gen = Rcpp::wrap(nodes_in_clades(trees, clades));
    return rcpp_result_gen;
END_RCPP
}
// find_clade_indices
Rcpp::IntegerMatrix find_clade_indices(Rcpp::List trees, Rcpp::IntegerMatrix clades);
RcppExport SEXP _MMCTime_find_clade_indices(SEXP treesSEXP, SEXP cladesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type clades(cladesSEXP);
    rcpp_result_gen = Rcpp::wrap(find_clade_indices(trees, clades));
    return rcpp_result_gen;
END_RCPP
}
// median_clade_times
void median_clade_times(Rcpp::List x, Rcpp::List all_trees, Rcpp::NumericMatrix ts);
RcppExport SEXP _MMCTime_median_clade_times(SEXP xSEXP, SEXP all_treesSEXP, SEXP tsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type all_trees(all_treesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ts(tsSEXP);
    median_clade_times(x, all_trees, ts);
    return R_NilValue;
END_RCPP
}
// sim_km_beta
Rcpp::List sim_km_beta(Rcpp::NumericVector samp_times, Rcpp::IntegerVector n_samp, double phi, double nu, double alpha);
RcppExport SEXP _MMCTime_sim_km_beta(SEXP samp_timesSEXP, SEXP n_sampSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type samp_times(samp_timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_samp(n_sampSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_km_beta(samp_times, n_samp, phi, nu, alpha));
    return rcpp_result_gen;
END_RCPP
}
// sim_beta
Rcpp::List sim_beta(Rcpp::NumericVector samp_times, Rcpp::IntegerVector n_samp, double nu, double alpha);
RcppExport SEXP _MMCTime_sim_beta(SEXP samp_timesSEXP, SEXP n_sampSEXP, SEXP nuSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type samp_times(samp_timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_samp(n_sampSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_beta(samp_times, n_samp, nu, alpha));
    return rcpp_result_gen;
END_RCPP
}
// sim_kingman
Rcpp::List sim_kingman(Rcpp::NumericVector samp_times, Rcpp::IntegerVector n_samp, double nu);
RcppExport SEXP _MMCTime_sim_kingman(SEXP samp_timesSEXP, SEXP n_sampSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type samp_times(samp_timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_samp(n_sampSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_kingman(samp_times, n_samp, nu));
    return rcpp_result_gen;
END_RCPP
}
// sim_ds
Rcpp::List sim_ds(Rcpp::NumericVector samp_times, Rcpp::IntegerVector n_samp, double phi, double nu);
RcppExport SEXP _MMCTime_sim_ds(SEXP samp_timesSEXP, SEXP n_sampSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type samp_times(samp_timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_samp(n_sampSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ds(samp_times, n_samp, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// initialise_times
void initialise_times(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::IntegerVector branch_data, double mu);
RcppExport SEXP _MMCTime_initialise_times(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP branch_dataSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    initialise_times(phydata, mod_state, branch_data, mu);
    return R_NilValue;
END_RCPP
}
// duplicate_mc_state
Rcpp::List duplicate_mc_state(Rcpp::List mod_state);
RcppExport SEXP _MMCTime_duplicate_mc_state(SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(duplicate_mc_state(mod_state));
    return rcpp_result_gen;
END_RCPP
}
// mc_state_copy_to
void mc_state_copy_to(Rcpp::List src, Rcpp::List dest);
RcppExport SEXP _MMCTime_mc_state_copy_to(SEXP srcSEXP, SEXP destSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type src(srcSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dest(destSEXP);
    mc_state_copy_to(src, dest);
    return R_NilValue;
END_RCPP
}
// duplicate_par_state
Rcpp::List duplicate_par_state(Rcpp::List mod_state);
RcppExport SEXP _MMCTime_duplicate_par_state(SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(duplicate_par_state(mod_state));
    return rcpp_result_gen;
END_RCPP
}
// par_state_copy_to
void par_state_copy_to(Rcpp::List src, Rcpp::List dest);
RcppExport SEXP _MMCTime_par_state_copy_to(SEXP srcSEXP, SEXP destSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type src(srcSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dest(destSEXP);
    par_state_copy_to(src, dest);
    return R_NilValue;
END_RCPP
}
// duplicate_tree
Rcpp::List duplicate_tree(Rcpp::List phydata);
RcppExport SEXP _MMCTime_duplicate_tree(SEXP phydataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    rcpp_result_gen = Rcpp::wrap(duplicate_tree(phydata));
    return rcpp_result_gen;
END_RCPP
}
// tree_copy_to
void tree_copy_to(Rcpp::List src, Rcpp::List dest);
RcppExport SEXP _MMCTime_tree_copy_to(SEXP srcSEXP, SEXP destSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type src(srcSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dest(destSEXP);
    tree_copy_to(src, dest);
    return R_NilValue;
END_RCPP
}
// times_from_taus
void times_from_taus(Rcpp::List phydata, Rcpp::List mod_state);
RcppExport SEXP _MMCTime_times_from_taus(SEXP phydataSEXP, SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    times_from_taus(phydata, mod_state);
    return R_NilValue;
END_RCPP
}
// taus_from_times
void taus_from_times(Rcpp::List phydata, Rcpp::List mod_state);
RcppExport SEXP _MMCTime_taus_from_times(SEXP phydataSEXP, SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    taus_from_times(phydata, mod_state);
    return R_NilValue;
END_RCPP
}
// validate_times
bool validate_times(Rcpp::List phydata, Rcpp::List mod_state);
RcppExport SEXP _MMCTime_validate_times(SEXP phydataSEXP, SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_times(phydata, mod_state));
    return rcpp_result_gen;
END_RCPP
}
// build_topo_mat
Rcpp::IntegerMatrix build_topo_mat(Rcpp::IntegerMatrix br_mat, int n_node, int root_pos);
RcppExport SEXP _MMCTime_build_topo_mat(SEXP br_matSEXP, SEXP n_nodeSEXP, SEXP root_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type br_mat(br_matSEXP);
    Rcpp::traits::input_parameter< int >::type n_node(n_nodeSEXP);
    Rcpp::traits::input_parameter< int >::type root_pos(root_posSEXP);
    rcpp_result_gen = Rcpp::wrap(build_topo_mat(br_mat, n_node, root_pos));
    return rcpp_result_gen;
END_RCPP
}
// build_branch_data
Rcpp::IntegerMatrix build_branch_data(Rcpp::IntegerMatrix br_mat, int n_node, int root_pos);
RcppExport SEXP _MMCTime_build_branch_data(SEXP br_matSEXP, SEXP n_nodeSEXP, SEXP root_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type br_mat(br_matSEXP);
    Rcpp::traits::input_parameter< int >::type n_node(n_nodeSEXP);
    Rcpp::traits::input_parameter< int >::type root_pos(root_posSEXP);
    rcpp_result_gen = Rcpp::wrap(build_branch_data(br_mat, n_node, root_pos));
    return rcpp_result_gen;
END_RCPP
}
// find_sbounds
Rcpp::NumericVector find_sbounds(Rcpp::IntegerMatrix br_mat, Rcpp::NumericVector tip_times, int n_tip, int root_idx);
RcppExport SEXP _MMCTime_find_sbounds(SEXP br_matSEXP, SEXP tip_timesSEXP, SEXP n_tipSEXP, SEXP root_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type br_mat(br_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tip_times(tip_timesSEXP);
    Rcpp::traits::input_parameter< int >::type n_tip(n_tipSEXP);
    Rcpp::traits::input_parameter< int >::type root_idx(root_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(find_sbounds(br_mat, tip_times, n_tip, root_idx));
    return rcpp_result_gen;
END_RCPP
}
// binary_to_mm
void binary_to_mm(Rcpp::List phydata, Rcpp::List mod_state, double tol);
RcppExport SEXP _MMCTime_binary_to_mm(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    binary_to_mm(phydata, mod_state, tol);
    return R_NilValue;
END_RCPP
}
// find_pivots
Rcpp::IntegerVector find_pivots(Rcpp::List phydata, Rcpp::IntegerVector branch_data);
RcppExport SEXP _MMCTime_find_pivots(SEXP phydataSEXP, SEXP branch_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(find_pivots(phydata, branch_data));
    return rcpp_result_gen;
END_RCPP
}
// as_lambda_events
Rcpp::List as_lambda_events(Rcpp::List phydata, Rcpp::List mod_state);
RcppExport SEXP _MMCTime_as_lambda_events(SEXP phydataSEXP, SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(as_lambda_events(phydata, mod_state));
    return rcpp_result_gen;
END_RCPP
}
// rwm_tau_move
double rwm_tau_move(Rcpp::List phydata, Rcpp::List curr_mc_state, Rcpp::List prop_mc_state, Rcpp::NumericVector sd);
RcppExport SEXP _MMCTime_rwm_tau_move(SEXP phydataSEXP, SEXP curr_mc_stateSEXP, SEXP prop_mc_stateSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type curr_mc_state(curr_mc_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prop_mc_state(prop_mc_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rwm_tau_move(phydata, curr_mc_state, prop_mc_state, sd));
    return rcpp_result_gen;
END_RCPP
}
// rwm_par_move
double rwm_par_move(Rcpp::List curr_par_state, Rcpp::List prop_par_state, Rcpp::NumericVector sd);
RcppExport SEXP _MMCTime_rwm_par_move(SEXP curr_par_stateSEXP, SEXP prop_par_stateSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type curr_par_state(curr_par_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prop_par_state(prop_par_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rwm_par_move(curr_par_state, prop_par_state, sd));
    return rcpp_result_gen;
END_RCPP
}
// push_mm_move
double push_mm_move(Rcpp::List phydata, Rcpp::List curr_state, Rcpp::List prop_state, double sd, Rcpp::IntegerVector branch_data);
RcppExport SEXP _MMCTime_push_mm_move(SEXP phydataSEXP, SEXP curr_stateSEXP, SEXP prop_stateSEXP, SEXP sdSEXP, SEXP branch_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type curr_state(curr_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prop_state(prop_stateSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(push_mm_move(phydata, curr_state, prop_state, sd, branch_data));
    return rcpp_result_gen;
END_RCPP
}
// topo_move
double topo_move(Rcpp::List curr_phydata, Rcpp::List curr_state, Rcpp::List prop_phydata, Rcpp::List prop_state, Rcpp::IntegerVector branch_data, Rcpp::IntegerVector pivots);
RcppExport SEXP _MMCTime_topo_move(SEXP curr_phydataSEXP, SEXP curr_stateSEXP, SEXP prop_phydataSEXP, SEXP prop_stateSEXP, SEXP branch_dataSEXP, SEXP pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type curr_phydata(curr_phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type curr_state(curr_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prop_phydata(prop_phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prop_state(prop_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pivots(pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(topo_move(curr_phydata, curr_state, prop_phydata, prop_state, branch_data, pivots));
    return rcpp_result_gen;
END_RCPP
}
// root_move
double root_move(Rcpp::List curr_phydata, Rcpp::List curr_state, Rcpp::List prop_phydata, Rcpp::List prop_state);
RcppExport SEXP _MMCTime_root_move(SEXP curr_phydataSEXP, SEXP curr_stateSEXP, SEXP prop_phydataSEXP, SEXP prop_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type curr_phydata(curr_phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type curr_state(curr_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prop_phydata(prop_phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prop_state(prop_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(root_move(curr_phydata, curr_state, prop_phydata, prop_state));
    return rcpp_result_gen;
END_RCPP
}
// transform_kmb_arc
double transform_kmb_arc(Rcpp::List par_state);
RcppExport SEXP _MMCTime_transform_kmb_arc(SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_kmb_arc(par_state));
    return rcpp_result_gen;
END_RCPP
}
// prob_kmb_arc
double prob_kmb_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state, Rcpp::IntegerVector branch_data);
RcppExport SEXP _MMCTime_prob_kmb_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP, SEXP branch_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_kmb_arc(phydata, mod_state, par_state, branch_data));
    return rcpp_result_gen;
END_RCPP
}
// coal_lp_kmb_arc
double coal_lp_kmb_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_coal_lp_kmb_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(coal_lp_kmb_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// summaries_kmb_arc
Rcpp::NumericVector summaries_kmb_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_summaries_kmb_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(summaries_kmb_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// transform_ds_arc
double transform_ds_arc(Rcpp::List par_state);
RcppExport SEXP _MMCTime_transform_ds_arc(SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_ds_arc(par_state));
    return rcpp_result_gen;
END_RCPP
}
// prob_ds_arc
double prob_ds_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state, Rcpp::IntegerVector branch_data);
RcppExport SEXP _MMCTime_prob_ds_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP, SEXP branch_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_ds_arc(phydata, mod_state, par_state, branch_data));
    return rcpp_result_gen;
END_RCPP
}
// coal_lp_ds_arc
double coal_lp_ds_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_coal_lp_ds_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(coal_lp_ds_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// summaries_ds_arc
Rcpp::NumericVector summaries_ds_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_summaries_ds_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(summaries_ds_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// transform_beta_arc
double transform_beta_arc(Rcpp::List par_state);
RcppExport SEXP _MMCTime_transform_beta_arc(SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_beta_arc(par_state));
    return rcpp_result_gen;
END_RCPP
}
// prob_beta_arc
double prob_beta_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state, Rcpp::IntegerVector branch_data);
RcppExport SEXP _MMCTime_prob_beta_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP, SEXP branch_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_beta_arc(phydata, mod_state, par_state, branch_data));
    return rcpp_result_gen;
END_RCPP
}
// coal_lp_beta_arc
double coal_lp_beta_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_coal_lp_beta_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(coal_lp_beta_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// summaries_beta_arc
Rcpp::NumericVector summaries_beta_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_summaries_beta_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(summaries_beta_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// transform_km_arc
double transform_km_arc(Rcpp::List par_state);
RcppExport SEXP _MMCTime_transform_km_arc(SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_km_arc(par_state));
    return rcpp_result_gen;
END_RCPP
}
// prob_km_arc
double prob_km_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state, Rcpp::IntegerVector branch_data);
RcppExport SEXP _MMCTime_prob_km_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP, SEXP branch_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type branch_data(branch_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_km_arc(phydata, mod_state, par_state, branch_data));
    return rcpp_result_gen;
END_RCPP
}
// coal_lp_km_arc
double coal_lp_km_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_coal_lp_km_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(coal_lp_km_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// summaries_km_arc
Rcpp::NumericVector summaries_km_arc(Rcpp::List phydata, Rcpp::List mod_state, Rcpp::List par_state);
RcppExport SEXP _MMCTime_summaries_km_arc(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP par_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type par_state(par_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(summaries_km_arc(phydata, mod_state, par_state));
    return rcpp_result_gen;
END_RCPP
}
// taus_to_times_logJ
double taus_to_times_logJ(Rcpp::List phydata, Rcpp::List mod_state);
RcppExport SEXP _MMCTime_taus_to_times_logJ(SEXP phydataSEXP, SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(taus_to_times_logJ(phydata, mod_state));
    return rcpp_result_gen;
END_RCPP
}
// times_to_taus_logJ
double times_to_taus_logJ(Rcpp::List phydata, Rcpp::List mod_state);
RcppExport SEXP _MMCTime_times_to_taus_logJ(SEXP phydataSEXP, SEXP mod_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(times_to_taus_logJ(phydata, mod_state));
    return rcpp_result_gen;
END_RCPP
}
// kingman_lp
double kingman_lp(Rcpp::List phydata, Rcpp::List mod_state, double nu);
RcppExport SEXP _MMCTime_kingman_lp(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(kingman_lp(phydata, mod_state, nu));
    return rcpp_result_gen;
END_RCPP
}
// km_beta_lp
double km_beta_lp(Rcpp::List phydata, Rcpp::List mod_state, double nu, double phi, double alpha);
RcppExport SEXP _MMCTime_km_beta_lp(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(km_beta_lp(phydata, mod_state, nu, phi, alpha));
    return rcpp_result_gen;
END_RCPP
}
// ds_lp
double ds_lp(Rcpp::List phydata, Rcpp::List mod_state, double nu, double phi);
RcppExport SEXP _MMCTime_ds_lp(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP nuSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(ds_lp(phydata, mod_state, nu, phi));
    return rcpp_result_gen;
END_RCPP
}
// beta_lp
double beta_lp(Rcpp::List phydata, Rcpp::List mod_state, double nu, double alpha);
RcppExport SEXP _MMCTime_beta_lp(SEXP phydataSEXP, SEXP mod_stateSEXP, SEXP nuSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phydata(phydataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod_state(mod_stateSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_lp(phydata, mod_state, nu, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MMCTime_maj_edge", (DL_FUNC) &_MMCTime_maj_edge, 1},
    {"_MMCTime_nodes_in_clades", (DL_FUNC) &_MMCTime_nodes_in_clades, 2},
    {"_MMCTime_find_clade_indices", (DL_FUNC) &_MMCTime_find_clade_indices, 2},
    {"_MMCTime_median_clade_times", (DL_FUNC) &_MMCTime_median_clade_times, 3},
    {"_MMCTime_sim_km_beta", (DL_FUNC) &_MMCTime_sim_km_beta, 5},
    {"_MMCTime_sim_beta", (DL_FUNC) &_MMCTime_sim_beta, 4},
    {"_MMCTime_sim_kingman", (DL_FUNC) &_MMCTime_sim_kingman, 3},
    {"_MMCTime_sim_ds", (DL_FUNC) &_MMCTime_sim_ds, 4},
    {"_MMCTime_initialise_times", (DL_FUNC) &_MMCTime_initialise_times, 4},
    {"_MMCTime_duplicate_mc_state", (DL_FUNC) &_MMCTime_duplicate_mc_state, 1},
    {"_MMCTime_mc_state_copy_to", (DL_FUNC) &_MMCTime_mc_state_copy_to, 2},
    {"_MMCTime_duplicate_par_state", (DL_FUNC) &_MMCTime_duplicate_par_state, 1},
    {"_MMCTime_par_state_copy_to", (DL_FUNC) &_MMCTime_par_state_copy_to, 2},
    {"_MMCTime_duplicate_tree", (DL_FUNC) &_MMCTime_duplicate_tree, 1},
    {"_MMCTime_tree_copy_to", (DL_FUNC) &_MMCTime_tree_copy_to, 2},
    {"_MMCTime_times_from_taus", (DL_FUNC) &_MMCTime_times_from_taus, 2},
    {"_MMCTime_taus_from_times", (DL_FUNC) &_MMCTime_taus_from_times, 2},
    {"_MMCTime_validate_times", (DL_FUNC) &_MMCTime_validate_times, 2},
    {"_MMCTime_build_topo_mat", (DL_FUNC) &_MMCTime_build_topo_mat, 3},
    {"_MMCTime_build_branch_data", (DL_FUNC) &_MMCTime_build_branch_data, 3},
    {"_MMCTime_find_sbounds", (DL_FUNC) &_MMCTime_find_sbounds, 4},
    {"_MMCTime_binary_to_mm", (DL_FUNC) &_MMCTime_binary_to_mm, 3},
    {"_MMCTime_find_pivots", (DL_FUNC) &_MMCTime_find_pivots, 2},
    {"_MMCTime_as_lambda_events", (DL_FUNC) &_MMCTime_as_lambda_events, 2},
    {"_MMCTime_rwm_tau_move", (DL_FUNC) &_MMCTime_rwm_tau_move, 4},
    {"_MMCTime_rwm_par_move", (DL_FUNC) &_MMCTime_rwm_par_move, 3},
    {"_MMCTime_push_mm_move", (DL_FUNC) &_MMCTime_push_mm_move, 5},
    {"_MMCTime_topo_move", (DL_FUNC) &_MMCTime_topo_move, 6},
    {"_MMCTime_root_move", (DL_FUNC) &_MMCTime_root_move, 4},
    {"_MMCTime_transform_kmb_arc", (DL_FUNC) &_MMCTime_transform_kmb_arc, 1},
    {"_MMCTime_prob_kmb_arc", (DL_FUNC) &_MMCTime_prob_kmb_arc, 4},
    {"_MMCTime_coal_lp_kmb_arc", (DL_FUNC) &_MMCTime_coal_lp_kmb_arc, 3},
    {"_MMCTime_summaries_kmb_arc", (DL_FUNC) &_MMCTime_summaries_kmb_arc, 3},
    {"_MMCTime_transform_ds_arc", (DL_FUNC) &_MMCTime_transform_ds_arc, 1},
    {"_MMCTime_prob_ds_arc", (DL_FUNC) &_MMCTime_prob_ds_arc, 4},
    {"_MMCTime_coal_lp_ds_arc", (DL_FUNC) &_MMCTime_coal_lp_ds_arc, 3},
    {"_MMCTime_summaries_ds_arc", (DL_FUNC) &_MMCTime_summaries_ds_arc, 3},
    {"_MMCTime_transform_beta_arc", (DL_FUNC) &_MMCTime_transform_beta_arc, 1},
    {"_MMCTime_prob_beta_arc", (DL_FUNC) &_MMCTime_prob_beta_arc, 4},
    {"_MMCTime_coal_lp_beta_arc", (DL_FUNC) &_MMCTime_coal_lp_beta_arc, 3},
    {"_MMCTime_summaries_beta_arc", (DL_FUNC) &_MMCTime_summaries_beta_arc, 3},
    {"_MMCTime_transform_km_arc", (DL_FUNC) &_MMCTime_transform_km_arc, 1},
    {"_MMCTime_prob_km_arc", (DL_FUNC) &_MMCTime_prob_km_arc, 4},
    {"_MMCTime_coal_lp_km_arc", (DL_FUNC) &_MMCTime_coal_lp_km_arc, 3},
    {"_MMCTime_summaries_km_arc", (DL_FUNC) &_MMCTime_summaries_km_arc, 3},
    {"_MMCTime_taus_to_times_logJ", (DL_FUNC) &_MMCTime_taus_to_times_logJ, 2},
    {"_MMCTime_times_to_taus_logJ", (DL_FUNC) &_MMCTime_times_to_taus_logJ, 2},
    {"_MMCTime_kingman_lp", (DL_FUNC) &_MMCTime_kingman_lp, 3},
    {"_MMCTime_km_beta_lp", (DL_FUNC) &_MMCTime_km_beta_lp, 5},
    {"_MMCTime_ds_lp", (DL_FUNC) &_MMCTime_ds_lp, 4},
    {"_MMCTime_beta_lp", (DL_FUNC) &_MMCTime_beta_lp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_MMCTime(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
